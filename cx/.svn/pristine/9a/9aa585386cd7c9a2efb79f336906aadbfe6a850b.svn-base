package com.mongo;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;

import net.sf.json.JSONObject;

import org.bson.Document;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.cx.bean.ResMessage;
import com.cx.util.CodeUtil;
import com.mongodb.MongoClient;
import com.mongodb.MongoClientOptions;
import com.mongodb.MongoClientURI;
import com.mongodb.MongoCredential;
import com.mongodb.MongoTimeoutException;
import com.mongodb.ServerAddress;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;

/**
 * mongodb数据记录
 */
public class MyMongo
{
	private static final Logger logger = LoggerFactory.getLogger(MyMongo.class);

	public static String MongoHost = "192.168.190.3";
	public static String MongoDB = "test";
	public static String MongoCollName = "java";
	public static String MongoUser = "";
	public static String MongoPass = "";
	
	public static MongoClient mongoClient;
	public static MongoCollection<Document> coll;
	
	/**
	 * 是否连接
	 */
	public static boolean isConn = true;
	
	/**
	 * 连接超时连接次数
	 */
	public static int connTimes;
	
	public MyMongo() {
		new DaemonThread().start();
	}
	
	/**
	 * @Title: connMdb 
	 * @Description: 创建mongdo链接
	 * @param 
	 * @return void
	 * @throws
	 */
	public static void connMdb()
	{
		if (coll == null)
		{
			// 构建Seed列表
			List<ServerAddress> seedList = new ArrayList<ServerAddress>();
			seedList.add(new ServerAddress(MongoHost, 27017));
			// 构建鉴权信息
			List<MongoCredential> credentials = new ArrayList<MongoCredential>();
			if (!"".equals(MongoUser) && !"".equals(MongoPass))
			{
				credentials.add(MongoCredential.createScramSha1Credential(MongoUser, MongoDB, MongoPass.toCharArray()));
			}
			MongoClientOptions options = MongoClientOptions.builder().serverSelectionTimeout(3000).socketTimeout(3000).connectionsPerHost(1).build();
			mongoClient = new MongoClient(seedList, credentials, options);

			MongoDatabase db = mongoClient.getDatabase(MongoDB);
			coll = db.getCollection(MongoCollName);
		}
	}

	
	/**
	 * @Title: writeLog 
	 * @Description: 记录日志
	 * @param @param doc
	 * @return void
	 * @throws
	 */
	private static void writeLog(Document doc){
		try
		{
			if(isConn){
				doc.append("processname", "DPC");
				doc.append("timestamp", new Date());
				doc.append("thread", Thread.currentThread().getName());
				doc.append("hostname", InetAddress.getLocalHost().getHostAddress());
				connMdb(); // 创建Mongdb连接
				coll.insertOne(doc); // 写入日志
			}
		} catch (UnknownHostException e)
		{
			connTimes++; // 连接异常次数+1
			if (connTimes > 5)
			{ // 连接异常次数超过10次置为异常
				isConn = false;
			}
			 logger.error("Mongdb-{}", e.getMessage());
		} catch (MongoTimeoutException e)
		{
			connTimes++; // 连接异常次数+1
			if (connTimes > 5)
			{ // 连接异常次数超过10次置为异常
				isConn = false;
			}
			logger.error("Mongdb-{}", e.getMessage());
		} catch (Exception e) {
			 logger.error("Mongdb-{}", e.getMessage());
		}
	}

	/**
	 * @ClassName:  
	 * @Description: 5分钟刷新一次连接状态
	 * @author stone
	 * @date 2016年12月20日 上午10:32:25 
	 */
	class DaemonThread extends Thread
	{
		@Override
		public void run()
		{
			while (true)
			{
				isConn = true;
				connTimes = 0;
				
				try
				{
					Thread.sleep(1000 * 60 * 5);
				} catch (InterruptedException e)
				{
					e.printStackTrace();
				}
			}
		}
	}

	/**
	 * 错误日志记录
	 */
	public static void mRequestFail(HttpServletRequest request, int eCode)
	{
		Document doc = new Document();

		String requestPath = request.getRequestURI();
		String url = requestPath.substring(requestPath.indexOf("rest") + 5);

		doc.append("logger", url);
		doc.append("level", "INFO");

		StringBuffer content = new StringBuffer();

		Map<String, Object> map = new HashMap<String, Object>();
		map.putAll(request.getParameterMap());
		map.remove("jsonpCallback");
		map.remove("now");
		map.remove("sign");
		map.remove("_");

		if (map.size() > 0)
		{
			content.append("【参数】");
			Set<String> pNames = map.keySet();
			for (String pName : pNames)
			{
				content.append(pName).append(":").append(((String[]) map.get(pName))[0]).append(" ");
			}
		}

		content.append("【返回】").append(eCode).append(":").append(ResMessage.getMessage(eCode));

		doc.append("message", content.toString());
		writeLog(doc);
		logger.info("【{}】{}", new Object[] { url, content });
	}

	/**
	 * 错误日志记录
	 */
	public static void mRequestFail(HttpServletRequest request, String eMess)
	{
		Document doc = new Document();

		String requestPath = request.getRequestURI();
		String url = requestPath.substring(requestPath.indexOf("/", 15) + 1);

		doc.append("logger", url);
		doc.append("level", "INFO");

		StringBuffer content = new StringBuffer();

		Map<String, Object> map = new HashMap<String, Object>();
		map.putAll(request.getParameterMap());
		map.remove("jsonpCallback");
		map.remove("now");
		map.remove("sign");
		map.remove("_");

		if (map.size() > 0)
		{
			content.append("【参数】");
			Set<String> pNames = map.keySet();
			for (String pName : pNames)
			{
				content.append(pName).append(":").append(((String[]) map.get(pName))[0]).append(" ");
			}
		}

		content.append("【返回】").append(eMess);

		doc.append("message", content.toString());
		writeLog(doc);
		logger.info("【{}】{}", new Object[] { url, content });
	}

	/**
	 * 错误日志记录
	 */
	public static void mErrorLog(String methodName, Exception e)
	{
		Document doc = new Document();
		doc.append("logger", methodName);
		doc.append("level", "ERROR");
		doc.append("message", CodeUtil.getErrorMessage(e));
		writeLog(doc);
		logger.error("【{}】", methodName, e);
	}

	/**
	 * 错误日志记录
	 */
	public static void mErrorLog(String methodName, String mess, Exception e)
	{
		Document doc = new Document();
		doc.append("logger", methodName);
		doc.append("level", "ERROR");
		doc.append("message", mess + ", " + CodeUtil.getErrorMessage(e));
		writeLog(doc);
		logger.error("【{}】", methodName, e);
	}

	/**
	 * 错误日志记录
	 */
	public static void mErrorLog(String methodName, HttpServletRequest request, Exception e)
	{
		StringBuffer content = new StringBuffer();
		Map<String, Object> map = new HashMap<String, Object>();
		map.putAll(request.getParameterMap());
		map.remove("jsonpCallback");
		map.remove("now");
		map.remove("sign");
		map.remove("_");
		if (map.size() > 0)
		{
			content.append("【参数】");
			Set<String> pNames = map.keySet();
			for (String pName : pNames)
			{
				content.append(pName).append(":").append(((String[]) map.get(pName))[0]).append(" ");
			}
		}
		Document doc = new Document();
		doc.append("logger", methodName);
		doc.append("level", "ERROR");
		doc.append("message", content + ", " + CodeUtil.getErrorMessage(e));
		writeLog(doc);
		logger.error("【{}】", methodName, e);
	}

	/**
	 * 请求记录日志
	 * @param level 日志等级
	 * @param methodName 请求方法
	 * @param utime 所花时间
	 * @param param 参数
	 * @param rValue 返回结果
	 */
	public static void mRequestLog(String methodName, long utime, HttpServletRequest request, JSONObject reJson)
	{
		Document doc = new Document();
		doc.append("logger", methodName + "<" + utime + ">");
		doc.append("level", "INFO");

		StringBuffer content = new StringBuffer();

		Map<String, Object> map = new HashMap<String, Object>();
		map.putAll(request.getParameterMap());
		map.remove("jsonpCallback");
		map.remove("now");
		map.remove("sign");
		map.remove("_");

		if (map.size() > 0)
		{
			content.append("【参数】");
			Set<String> pNames = map.keySet();
			for (String pName : pNames)
			{
				content.append(pName).append(":").append(((String[]) map.get(pName))[0]).append(" ");
			}
		}
		if (!reJson.isEmpty())
		{
			content.append("【返回】").append(reJson);
		} else
		{
			content.append("【数据为空】");
		}
		doc.append("message", content.toString());
		writeLog(doc);
		logger.info("【{}-<{}>】{}", new Object[] { methodName, utime, content });
	}

	/**
	 * 请求记录日志
	 * @param level 日志等级
	 * @param methodName 请求方法
	 * @param utime 所花时间
	 * @param param 参数
	 * @param rValue 返回结果
	 */
	public static void mRequestLog(String methodName, long utime, HttpServletRequest request, String textHtml)
	{
		Document doc = new Document();
		doc.append("logger", methodName + "<" + utime + ">");
		doc.append("level", "INFO");

		StringBuffer content = new StringBuffer();

		Map<String, Object> map = new HashMap<String, Object>();
		map.putAll(request.getParameterMap());
		map.remove("jsonpCallback");
		map.remove("now");
		map.remove("sign");
		map.remove("_");

		if (map.size() > 0)
		{
			content.append("【参数】");
			Set<String> pNames = map.keySet();
			for (String pName : pNames)
			{
				content.append(pName).append(":").append(((String[]) map.get(pName))[0]).append(" ");
			}
		}
		content.append("【返回】").append(textHtml);
		doc.append("message", content.toString());
		writeLog(doc);
		logger.info("【{}-<{}>】{}", new Object[] { methodName, utime, content });
	}

	/**
	 * mongodb数据库插入记录
	 */
	public static void mLog(String level, Object record, Object content)
	{
		Document doc = new Document();
		doc.append("logger", record);
		doc.append("level", level);
		doc.append("message", content.toString());
		logger.info("【{}】【{}】", record, content);
		writeLog(doc);
	}
	
}
