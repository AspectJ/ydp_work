package com.cp.rest.card;

import java.io.FileInputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;

import org.jboss.resteasy.annotations.cache.NoCache;
import org.springframework.stereotype.Service;


import com.cp.bean.Convert;
import com.cp.bean.ResMessage;
import com.cp.filter.BaseServlet;
import com.cp.rest.card.dao.CardConfDaoImpl;
import com.cp.rest.card.dao.CardDaoImpl;
import com.cp.rest.card.dao.ConfCinemaDaoImpl;
import com.cp.rest.userinfo.LogInfoAdd;
import com.cp.rest.userinfo.redis.UserRedisImpl;
import com.cp.util.CodeUtil;
import com.cp.util.Config;
import com.cp.util.DateFormatUtil;
import com.cp.util.DesUtil;
import com.mongo.MyMongo;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

@Path("rest/card")
@NoCache
@Service()
public class CardRest extends BaseServlet
{
	@Resource
	private CardConfDaoImpl cardConfDao;
	@Resource
	private CardDaoImpl cardDao;
	@Resource
	private ConfCinemaDaoImpl cinameDao;
	@Resource
	private LogInfoAdd logInfo;
	@Resource
	private UserRedisImpl userRedis;
	
	
	/**
	 * 查看卡号列表
	 */
	@GET
	@POST
	@Path("/getCardList")
	@Produces("text/html;charset=UTF-8")
	public String getRoleList(@Context HttpServletRequest request, @Context HttpServletResponse response){
		JSONObject resultJson = new JSONObject();
		long stime = System.currentTimeMillis();
		String userid = String.valueOf(request.getAttribute("userid"));
		List<String> userFeilds = userRedis.getUserField(userid, "roletype".getBytes(), "theaternum".getBytes(),"username".getBytes());
		if(userFeilds != null){
			//分页参数、条件查询参数
			String pagesize = request.getParameter("pagesize");//每页多少条数据
			String page = request.getParameter("page");//page＝（当前页数－1）*pagesize
			String cardconfid = request.getParameter("cardconfid");//卡批次号
			try{
				String search = URLDecoder.decode(request.getParameter("search"), "UTF-8");
				Map<String, Object> searchInfo = new HashMap<String, Object>();
				searchInfo.put("pageSize", Integer.parseInt(pagesize));
				searchInfo.put("offsetNum", Integer.parseInt(pagesize) * (Integer.parseInt(page) - 1));
				searchInfo.put("cardconfid", cardconfid);
				if(!CodeUtil.checkParam(search)){
					searchInfo.put("cardnumber", "%" + search + "%");
				}
				Map<String, Object> countMap = cardDao.getCardCount(searchInfo);
				String count = countMap.get("count").toString();
				List<Map<String, Object>> resultList = cardDao.getCardList(searchInfo);
				JSONArray jsonArray = new JSONArray();
				if(resultList != null && resultList.size() > 0){
					for(int i=0;i<resultList.size();i++){
						Map<String, Object> resultMap = resultList.get(i);
						JSONObject data = new JSONObject();
						data.put("cardid", resultMap.get("cardid"));
						data.put("cardconfid", resultMap.get("cardconfid"));
						data.put("cardname", resultMap.get("cardname"));
						data.put("cardtype", resultMap.get("cardtype"));
						data.put("cardtype_name", Convert.convertCardConfType(resultMap.get("cardtype").toString()));
						data.put("count", resultMap.get("count"));
						data.put("value", resultMap.get("value"));
						data.put("starttime", new SimpleDateFormat("yyyy-MM-dd").format(resultMap.get("starttime")));
						data.put("endtime", new SimpleDateFormat("yyyy-MM-dd").format(resultMap.get("endtime")));
						data.put("quantity", resultMap.get("quantity"));
						data.put("note", resultMap.get("note"));
						data.put("cardnumber", resultMap.get("cardnumber"));
						data.put("cardcipher", resultMap.get("cardcipher"));
						data.put("restcount", resultMap.get("restcount"));
						data.put("restvalue", resultMap.get("restvalue"));
						data.put("operatorid", resultMap.get("username"));
						data.put("modifytime", new SimpleDateFormat("yyyy-MM-dd HH:mm").format(resultMap.get("modifytime")));
						jsonArray.add(data);
					}
					resultJson.put("total", count);
					resultJson.put("data", jsonArray);
				}else{
					MyMongo.mRequestFail(request, "查询发行卡卡号信息列表不存在");
					return this.returnError(resultJson, ResMessage.Select_Info_NotExist.code, request);
				}
			} catch (Exception e){
				MyMongo.mErrorLog("查询发行卡卡号信息列表失败", request, e);
				return this.returnError(resultJson, ResMessage.Select_Info_Fail.code, request);
			}
			long etime = System.currentTimeMillis();
			MyMongo.mRequestLog("查询发行卡卡号信息列表成功",  etime - stime, request, resultJson);
			return this.response(resultJson, request);
		}else{
			MyMongo.mRequestFail(request, "登录超时");
			return this.returnError(resultJson, ResMessage.User_Login_TimeOut.code, request);
		}
	}
	
	
	
	/**
	 * 导出通卡(券)信息
	 * @throws UnsupportedEncodingException 
	 */
	@GET
	@POST
	@Path("/exportCard")
	@Produces("text/html;charset=UTF-8")
	public String exportCard(@Context HttpServletRequest request, @Context HttpServletResponse response) throws UnsupportedEncodingException{
		JSONObject resultJson = new JSONObject();
		long stime = System.currentTimeMillis();
		String cardconfid = request.getParameter("cardconfid");//ID
		String cardname = request.getParameter("cardname");
		try{
			if (CodeUtil.checkParam(cardconfid)){
				MyMongo.mRequestFail(request, ResMessage.Lack_Param.code);
				return this.returnError(resultJson, ResMessage.Lack_Param.code, request);
			}
			Map<String, Object> paramMap = new HashMap<String, Object>();
			paramMap.put("cardconfid", Integer.parseInt(cardconfid));
			Map<String, Object> basicMap = cardConfDao.getCardConfBasic(paramMap);
			cardname = basicMap.get("cardname").toString();
			if("0".equals(basicMap.get("status").toString())){
				return this.returnError(resultJson, ResMessage.Commit_Operator_Fail.code, request);
			}else{
				String fileName = cardDao.exportXlsFile(cardconfid, request);
				if("0".equals(fileName)){//没有数据
					resultJson.put("failMsg", cardname+"未找到对应的卡号信息");
					return this.returnError(resultJson, ResMessage.Select_Info_NotExist.code, request); 
				}else if("1".equals(fileName)){//数据有误
					resultJson.put("failMsg", cardname+"卡号信息有误");
					return this.returnError(resultJson, ResMessage.Select_Info_Fail.code, request); 
				}else{
					resultJson.put("path", fileName);
				}
			}
		} catch (Exception e){
			MyMongo.mErrorLog("导出通卡(券)卡号信息失败", request, e);
			return this.returnError(resultJson, ResMessage.Select_Info_Fail.code, request); 
		}
		long etime = System.currentTimeMillis();
		MyMongo.mRequestLog("导出通卡(券)["+cardname+"]卡号信息成功",  etime - stime, request, resultJson);
		String logContent = "导出通卡(券)["+cardname+"]卡号信息";
		logInfo.addLogInfo(request, "0", logContent);
		return this.response(resultJson, request);
	}
	
	
	
	
	/**
	 * 新建卡号信息
	 * @throws UnsupportedEncodingException 
	 */
	@GET
	@POST
	@Path("/addCard")
	@Produces("text/html;charset=UTF-8")
	public String addCardConf(@Context HttpServletRequest request, @Context HttpServletResponse response) throws UnsupportedEncodingException{
		JSONObject resultJson = new JSONObject();
		long stime = System.currentTimeMillis();
		String userid = String.valueOf(request.getAttribute("userid"));
		List<String> userFeilds = userRedis.getUserField(userid, "theaternum".getBytes(),"username".getBytes());
		System.out.println("addCard");
		if(userFeilds != null){
			String cardconfid = request.getParameter("cardconfid");
			String cardname = "";
			String cardtype = "";
			try{
				if (CodeUtil.checkParam(cardconfid)){
					MyMongo.mRequestFail(request, ResMessage.Lack_Param.code);
					return this.returnError(resultJson, ResMessage.Lack_Param.code, request);
				}
				Map<String,Object> paramMap = new HashMap<String, Object>();
				paramMap.put("cardconfid", cardconfid);
				Map<String, Object> cardconfMap = cardConfDao.getCardConfBasic(paramMap);//查询基本信息
				if(cardconfMap.get("status").toString().equals("0")){//未生成
					cardname = cardconfMap.get("cardname").toString();
					cardtype = cardconfMap.get("cardtype").toString();
					if("0".equals(cardtype)){
						paramMap.put("restcount", cardconfMap.get("count"));
						paramMap.put("restvalue", 0);
					}else if("1".equals(cardtype)){
						paramMap.put("restcount", 0);
						paramMap.put("restvalue", cardconfMap.get("value"));
					}
					paramMap.put("createtime", new Date());
					paramMap.put("modifytime", new Date());
					paramMap.put("operatorid", userid);
					
					String quantity = cardconfMap.get("quantity").toString();//需要生成的卡号数量
					int cardcount = Integer.parseInt(quantity);
					for(int i=0;i<cardcount;i++){
						String cardnumber = CodeUtil.getRandomUUID(16).toUpperCase();
						String cardcipher = CodeUtil.getRandomUUID(16).toUpperCase();
						String desCardCipher = DesUtil.desEncrypt(cardcipher, Config.DES_KEY);//加密
						System.out.println("cardnumber1:"+cardnumber+";cardcipher1:"+cardcipher+";desCardCipher1:"+desCardCipher);
						paramMap.put("cardnumber", cardnumber);
						paramMap.put("cardcipher", desCardCipher);
						cardDao.insertCard(paramMap);
					}
					Map<String, Object> updateMap = new HashMap<String, Object>();
					updateMap.put("status", 1);
					updateMap.put("cardconfid", cardconfid);
					Map<String, Object> countMap = cardDao.getCardCount(updateMap);
					String count = countMap.get("count").toString();
					if(Integer.parseInt(count) == cardcount){//已全部添加
						cardConfDao.updateCardConf(updateMap);//修改生成卡号状态
					}else{//继续添加
						cardDao.deleteCard(paramMap);
						int uncount = cardcount - Integer.parseInt(count);
						System.out.println("uncount:"+uncount);
						for(int i=0;i<uncount;i++){
							String cardnumber = CodeUtil.getRandomUUID(16).toUpperCase();
							String cardcipher = CodeUtil.getRandomUUID(16).toUpperCase();
							String desCardCipher = DesUtil.desEncrypt(cardcipher, Config.DES_KEY);//加密
							System.out.println("cardnumber:"+cardnumber+";cardcipher:"+cardcipher+";desCardCipher:"+desCardCipher);
							paramMap.put("cardnumber", cardnumber);
							paramMap.put("cardcipher", desCardCipher);
							cardDao.insertCard(paramMap);
						}
						cardConfDao.updateCardConf(updateMap);//修改生成卡号状态
					}
					JSONObject data = new JSONObject();
					data.put("quantity", cardcount);
					resultJson.put("data", data);
				}else{
					return this.returnError(resultJson, ResMessage.Commit_Operator_Fail.code, request);
				}
			} catch (Exception e){
				MyMongo.mErrorLog("生成卡号信息失败", request, e);
				return this.returnError(resultJson, ResMessage.Add_Info_Fail.code, request);
			}
			long etime = System.currentTimeMillis();
			MyMongo.mRequestLog("["+cardname+"]生成卡号信息成功",  etime - stime, request, resultJson);
			String logContent = "["+cardname+"]生成卡号";
			logInfo.addLogInfo(request, "0", logContent);
			return this.response(resultJson, request);
		}else{
			MyMongo.mRequestFail(request, "登录超时");
			return this.returnError(resultJson, ResMessage.User_Login_TimeOut.code, request);
		}
	}

	
	/**
	 * 核销
	 */
	@GET
	@POST
	@Path("/cardMess")
	@Produces("text/html;charset=UTF-8")
	public String getCardConf(@Context HttpServletRequest request, @Context HttpServletResponse response){
		JSONObject resultJson = new JSONObject();
		long stime = System.currentTimeMillis();
		String userid = String.valueOf(request.getAttribute("userid"));
		List<String> userFeilds = userRedis.getUserField(userid, "roletype".getBytes(), "theaternum".getBytes(),"username".getBytes());
		if(userFeilds != null){
			String theaternum = userFeilds.get(1);//登录人影院编码
			if("0".equals(theaternum)){//不是影院工作人员、不能进行核销
				MyMongo.mRequestFail(request, "非影院登录账号，不能核销");
				return this.returnError(resultJson, ResMessage.No_Theater_Staff.code, request);
			}
			String cardcipher = request.getParameter("cardcipher");
			try{
				Map<String, Object> searchInfo = new HashMap<String, Object>();
				String desCardCipher = DesUtil.desEncrypt(cardcipher.toUpperCase(), Config.DES_KEY);//转大写后加密
				searchInfo.put("cardcipher", desCardCipher);
				Map<String, Object> resultMap = cardDao.getCardInfo(searchInfo);
				if(resultMap != null){//存在密码对应的卡信息
					searchInfo.put("cardconfid", resultMap.get("cardconfid"));
					String cardname = resultMap.get("cardname").toString();
					String starttime = new SimpleDateFormat("yyyy-MM-dd HH:mm").format(resultMap.get("starttime"));
					String endtime = new SimpleDateFormat("yyyy-MM-dd HH:mm").format(resultMap.get("endtime"));
					int compare1 = DateFormatUtil.compareDate(starttime);//-1
					int compare2 = DateFormatUtil.compareDate(endtime);//1
					if(compare1 == -1 && compare2 == 1){//符合有效期时间区间的要求
						if(resultMap.get("cardtype").equals("0")){//次卡
							String restcount = resultMap.get("restcount").toString();//剩余次数
							if(Integer.parseInt(restcount)==0){//已用完
								MyMongo.mRequestFail(request, "此卡次数已用完");
								return this.returnError(resultJson, ResMessage.All_Already_Used.code, request);
							}
						}else if(resultMap.get("cardtype").equals("1")){//储值卡
							String restvalue = resultMap.get("restvalue").toString();
							if(Integer.parseInt(restvalue)==0){//已用完
								MyMongo.mRequestFail(request, "此卡点数已用完");
								return this.returnError(resultJson, ResMessage.All_Already_Used.code, request);
							}
						}
						List<Map<String, Object>> cinemaList = cinameDao.getConfCinemaList(searchInfo);
						if(cinemaList != null && cinemaList.size()>0){
							String consumetype = "";
							boolean cinemaFlag = false;
							JSONArray jsonArray = new JSONArray();
							for(int i=0;i<cinemaList.size();i++){
								Map<String, Object> cinemaMap = cinemaList.get(i);
								String theaterNum = cinemaMap.get("theaternum").toString();
								String theaterName = cinemaMap.get("theatername").toString();
								if(theaternum.equals(theaterNum)){//存在该影院
									cinemaFlag = true;
									consumetype = cinemaMap.get("consumetype").toString();
								}
								JSONObject cinemaData = new JSONObject();
								cinemaData.put("cinemaname", theaterName);
								jsonArray.add(cinemaData);
							}
							if(cinemaFlag == false){
								JSONObject data = new JSONObject();
								data.put("cinemainfo", jsonArray);
								data.put("cardname", cardname);
								resultJson.put("data", data);
								MyMongo.mRequestFail(request, "此卡不能在当前影院进行消费");
								return this.returnError(resultJson, ResMessage.Card_Cinema_Consume_Fail.code, request);
							}else{
								if("2".equals(consumetype) || "3".equals(consumetype)){//前台可消费
									JSONObject data = new JSONObject();
									data.put("cardconfid", resultMap.get("cardconfid"));
									data.put("cardname", resultMap.get("cardname"));
									data.put("cardtype", resultMap.get("cardtype"));
									data.put("cardtype_name", Convert.convertCardConfType(resultMap.get("cardtype").toString()));
									data.put("count", resultMap.get("count"));
									data.put("value", resultMap.get("value"));
									data.put("starttime", new SimpleDateFormat("yyyy-MM-dd").format(resultMap.get("starttime")));
									data.put("endtime", new SimpleDateFormat("yyyy-MM-dd").format(resultMap.get("endtime")));
									data.put("quantity", resultMap.get("quantity"));
									data.put("note", resultMap.get("note"));
									data.put("cardnumber", resultMap.get("cardnumber"));
									data.put("cardcipher", resultMap.get("cardcipher"));
									data.put("cardid", resultMap.get("cardid"));
									data.put("restcount", resultMap.get("restcount"));
									data.put("restvalue", resultMap.get("restvalue"));
									data.put("createtime", resultMap.get("createtime"));
									data.put("consumetype", Convert.convertConfCinemaType(consumetype));
									resultJson.put("data", data);
								}else{
									JSONObject data = new JSONObject();
									data.put("cardname", cardname);
									resultJson.put("data", data);
									MyMongo.mRequestFail(request, "此卡只能在线上进行消费");
									return this.returnError(resultJson, ResMessage.Card_Cinema_Consume_Online.code, request);
								}
							}
						}else{
							JSONObject data = new JSONObject();
							data.put("cardname", cardname);
							resultJson.put("data", data);
							MyMongo.mRequestFail(request, "查询通卡券影院配置信息不存在");
							return this.returnError(resultJson, ResMessage.No_Conf_Cinema.code, request);
						}
						
					}else{
						JSONObject data = new JSONObject();
						data.put("cardname", cardname);
						data.put("starttime", starttime);
						data.put("endtime", endtime);
						resultJson.put("data", data);
						MyMongo.mRequestFail(request, "此卡不在可消费的有效期");
						return this.returnError(resultJson, ResMessage.Not_With_Validity.code, request);
					}
				}else{
					MyMongo.mRequestFail(request, "查询发行卡号信息不存在");
					return this.returnError(resultJson, ResMessage.Select_Info_NotExist.code, request);
				}
			} catch (Exception e){
				MyMongo.mErrorLog("查询发行卡号信息失败", request, e);
				return this.returnError(resultJson, ResMessage.Select_Info_Fail.code, request);
			}
			long etime = System.currentTimeMillis();
			MyMongo.mRequestLog("查询发行卡号信息成功",  etime - stime, request, resultJson);
			return this.response(resultJson, request);
		}else{
			MyMongo.mRequestFail(request, "登录超时");
			return this.returnError(resultJson, ResMessage.User_Login_TimeOut.code, request);
		}
	}
	
	
	/**
	 * 根据卡号、密码核销
	 * @throws UnsupportedEncodingException 
	 */
	@GET
	@POST
	@Path("/chargeOffCard")
	@Produces("text/html;charset=UTF-8")
	public String chargeOffCard(@Context HttpServletRequest request, @Context HttpServletResponse response) throws UnsupportedEncodingException{
		JSONObject resultJson = new JSONObject();
		long stime = System.currentTimeMillis();
		String userid = String.valueOf(request.getAttribute("userid"));
		List<String> userFeilds = userRedis.getUserField(userid, "theaternum".getBytes(),"username".getBytes());
		System.out.println("chargeOffCard");
		if(userFeilds != null){
			String cardconfid = request.getParameter("cardconfid");
			String cardid = request.getParameter("cardid");
			String cardnumber = request.getParameter("cardnumber");
			String cardcipher = request.getParameter("cardcipher");
			String spend = request.getParameter("spend");//核销次数、点数
			String cardtype = "";
			try{
				if (CodeUtil.checkParam(cardconfid,cardid,spend)){
					MyMongo.mRequestFail(request, ResMessage.Lack_Param.code);
					return this.returnError(resultJson, ResMessage.Lack_Param.code, request);
				}
				Map<String,Object> paramMap = new HashMap<String, Object>();
				paramMap.put("cardconfid", cardconfid);
				paramMap.put("cardid", cardid);
				Map<String, Object> cardMap = cardDao.getCardInfo(paramMap);//查询基本信息
				String count = "0";
				String value = "0";
				if(cardMap.get("status").toString().equals("1")){//已生成
					cardtype = cardMap.get("cardtype").toString();
					count = cardMap.get("count").toString();//次数
					value = cardMap.get("value").toString();//面值
					
					if("0".equals(cardtype)){//次卡
						//查询是否还可以核销
						
						//插入核销次数记录
						
						//更新可用的卡号信息
						
					}else if("1".equals(cardtype)){//储值卡
						
					}
					
					
				}else{
					return this.returnError(resultJson, ResMessage.Commit_Operator_Fail.code, request);
				}
			} catch (Exception e){
				MyMongo.mErrorLog("卡号核销信息失败", request, e);
				return this.returnError(resultJson, ResMessage.Update_Info_Fail.code, request);
			}
			long etime = System.currentTimeMillis();
			MyMongo.mRequestLog("["+cardnumber+"]卡号核销成功",  etime - stime, request, resultJson);
			String logContent = "["+cardnumber+"]卡号核销["+spend+"]次/点数";
			logInfo.addLogInfo(request, "0", logContent);
			return this.response(resultJson, request);
		}else{
			MyMongo.mRequestFail(request, "登录超时");
			return this.returnError(resultJson, ResMessage.User_Login_TimeOut.code, request);
		}
	}
	
	
}
